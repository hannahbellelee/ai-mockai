/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// The expiration policy for a vector store.
    /// </summary>
    [DataContract]
    public partial class VectorStoreExpirationAfter : IEquatable<VectorStoreExpirationAfter>
    { 
        /// <summary>
        /// Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
        /// </summary>
        /// <value>Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AnchorEnum
        {
            /// <summary>
            /// Enum LastActiveAtEnum for last_active_at
            /// </summary>
            [EnumMember(Value = "last_active_at")]
            LastActiveAtEnum = 0        }

        /// <summary>
        /// Anchor timestamp after which the expiration policy applies. Supported anchors: &#x60;last_active_at&#x60;.
        /// </summary>
        /// <value>Anchor timestamp after which the expiration policy applies. Supported anchors: &#x60;last_active_at&#x60;.</value>
        [Required]

        [DataMember(Name="anchor")]
        public AnchorEnum? Anchor { get; set; }

        /// <summary>
        /// The number of days after the anchor time that the vector store will expire.
        /// </summary>
        /// <value>The number of days after the anchor time that the vector store will expire.</value>
        [Required]

        [Range(1, 365)]
        [DataMember(Name="days")]
        public int? Days { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VectorStoreExpirationAfter {\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VectorStoreExpirationAfter)obj);
        }

        /// <summary>
        /// Returns true if VectorStoreExpirationAfter instances are equal
        /// </summary>
        /// <param name="other">Instance of VectorStoreExpirationAfter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VectorStoreExpirationAfter other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Anchor == other.Anchor ||
                    Anchor != null &&
                    Anchor.Equals(other.Anchor)
                ) && 
                (
                    Days == other.Days ||
                    Days != null &&
                    Days.Equals(other.Days)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Anchor != null)
                    hashCode = hashCode * 59 + Anchor.GetHashCode();
                    if (Days != null)
                    hashCode = hashCode * 59 + Days.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VectorStoreExpirationAfter left, VectorStoreExpirationAfter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VectorStoreExpirationAfter left, VectorStoreExpirationAfter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
