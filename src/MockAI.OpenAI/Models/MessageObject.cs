/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Represents a message within a [thread](/docs/api-reference/threads).
    /// </summary>
    [DataContract]
    public partial class MessageObject : IEquatable<MessageObject>
    { 
        /// <summary>
        /// The identifier, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints.</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The object type, which is always `thread.message`.
        /// </summary>
        /// <value>The object type, which is always `thread.message`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum ThreadMessageEnum for thread.message
            /// </summary>
            [EnumMember(Value = "thread.message")]
            ThreadMessageEnum = 0        }

        /// <summary>
        /// The object type, which is always &#x60;thread.message&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.message&#x60;.</value>
        [Required]

        [DataMember(Name="object")]
        public ObjectEnum? _Object { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the message was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the message was created.</value>
        [Required]

        [DataMember(Name="created_at")]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// The [thread](/docs/api-reference/threads) ID that this message belongs to.
        /// </summary>
        /// <value>The [thread](/docs/api-reference/threads) ID that this message belongs to.</value>
        [Required]

        [DataMember(Name="thread_id")]
        public string ThreadId { get; set; }

        /// <summary>
        /// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
        /// </summary>
        /// <value>The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 0,
            /// <summary>
            /// Enum IncompleteEnum for incomplete
            /// </summary>
            [EnumMember(Value = "incomplete")]
            IncompleteEnum = 1,
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 2        }

        /// <summary>
        /// The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.
        /// </summary>
        /// <value>The status of the message, which can be either &#x60;in_progress&#x60;, &#x60;incomplete&#x60;, or &#x60;completed&#x60;.</value>
        [Required]

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets IncompleteDetails
        /// </summary>
        [Required]

        [DataMember(Name="incomplete_details")]
        public MessageObjectIncompleteDetails IncompleteDetails { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the message was completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the message was completed.</value>
        [Required]

        [DataMember(Name="completed_at")]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the message was marked as incomplete.</value>
        [Required]

        [DataMember(Name="incomplete_at")]
        public int? IncompleteAt { get; set; }

        /// <summary>
        /// The entity that produced the message. One of `user` or `assistant`.
        /// </summary>
        /// <value>The entity that produced the message. One of `user` or `assistant`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum UserEnum for user
            /// </summary>
            [EnumMember(Value = "user")]
            UserEnum = 0,
            /// <summary>
            /// Enum AssistantEnum for assistant
            /// </summary>
            [EnumMember(Value = "assistant")]
            AssistantEnum = 1        }

        /// <summary>
        /// The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
        /// </summary>
        /// <value>The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.</value>
        [Required]

        [DataMember(Name="role")]
        public RoleEnum? Role { get; set; }

        /// <summary>
        /// The content of the message in array of text and/or images.
        /// </summary>
        /// <value>The content of the message in array of text and/or images.</value>
        [Required]

        [DataMember(Name="content")]
        public List<OneOfMessageObjectContentItems> Content { get; set; }

        /// <summary>
        /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
        /// </summary>
        /// <value>If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.</value>
        [Required]

        [DataMember(Name="assistant_id")]
        public string AssistantId { get; set; }

        /// <summary>
        /// The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.
        /// </summary>
        /// <value>The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is &#x60;null&#x60; when messages are created manually using the create message or create thread endpoints.</value>
        [Required]

        [DataMember(Name="run_id")]
        public string RunId { get; set; }

        /// <summary>
        /// A list of files attached to the message, and the tools they were added to.
        /// </summary>
        /// <value>A list of files attached to the message, and the tools they were added to.</value>
        [Required]

        [DataMember(Name="attachments")]
        public List<MessageObjectAttachments> Attachments { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [Required]

        [DataMember(Name="metadata")]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IncompleteDetails: ").Append(IncompleteDetails).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  IncompleteAt: ").Append(IncompleteAt).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  AssistantId: ").Append(AssistantId).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MessageObject)obj);
        }

        /// <summary>
        /// Returns true if MessageObject instances are equal
        /// </summary>
        /// <param name="other">Instance of MessageObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageObject other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    _Object == other._Object ||
                    _Object != null &&
                    _Object.Equals(other._Object)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    ThreadId == other.ThreadId ||
                    ThreadId != null &&
                    ThreadId.Equals(other.ThreadId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    IncompleteDetails == other.IncompleteDetails ||
                    IncompleteDetails != null &&
                    IncompleteDetails.Equals(other.IncompleteDetails)
                ) && 
                (
                    CompletedAt == other.CompletedAt ||
                    CompletedAt != null &&
                    CompletedAt.Equals(other.CompletedAt)
                ) && 
                (
                    IncompleteAt == other.IncompleteAt ||
                    IncompleteAt != null &&
                    IncompleteAt.Equals(other.IncompleteAt)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.SequenceEqual(other.Content)
                ) && 
                (
                    AssistantId == other.AssistantId ||
                    AssistantId != null &&
                    AssistantId.Equals(other.AssistantId)
                ) && 
                (
                    RunId == other.RunId ||
                    RunId != null &&
                    RunId.Equals(other.RunId)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(other.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (_Object != null)
                    hashCode = hashCode * 59 + _Object.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (ThreadId != null)
                    hashCode = hashCode * 59 + ThreadId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (IncompleteDetails != null)
                    hashCode = hashCode * 59 + IncompleteDetails.GetHashCode();
                    if (CompletedAt != null)
                    hashCode = hashCode * 59 + CompletedAt.GetHashCode();
                    if (IncompleteAt != null)
                    hashCode = hashCode * 59 + IncompleteAt.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                    if (AssistantId != null)
                    hashCode = hashCode * 59 + AssistantId.GetHashCode();
                    if (RunId != null)
                    hashCode = hashCode * 59 + RunId.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MessageObject left, MessageObject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MessageObject left, MessageObject right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
