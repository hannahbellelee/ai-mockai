/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// The hyperparameters used for the fine-tuning job.
    /// </summary>
    [DataContract]
    public partial class CreateFineTuningJobRequestHyperparameters : IEquatable<CreateFineTuningJobRequestHyperparameters>
    { 
        /// <summary>
        /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. 
        /// </summary>
        /// <value>Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. </value>

        [DataMember(Name="batch_size")]
        public OneOfCreateFineTuningJobRequestHyperparametersBatchSize BatchSize { get; set; }

        /// <summary>
        /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. 
        /// </summary>
        /// <value>Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. </value>

        [DataMember(Name="learning_rate_multiplier")]
        public OneOfCreateFineTuningJobRequestHyperparametersLearningRateMultiplier LearningRateMultiplier { get; set; }

        /// <summary>
        /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 
        /// </summary>
        /// <value>The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. </value>

        [DataMember(Name="n_epochs")]
        public OneOfCreateFineTuningJobRequestHyperparametersNEpochs NEpochs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFineTuningJobRequestHyperparameters {\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  LearningRateMultiplier: ").Append(LearningRateMultiplier).Append("\n");
            sb.Append("  NEpochs: ").Append(NEpochs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateFineTuningJobRequestHyperparameters)obj);
        }

        /// <summary>
        /// Returns true if CreateFineTuningJobRequestHyperparameters instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateFineTuningJobRequestHyperparameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFineTuningJobRequestHyperparameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BatchSize == other.BatchSize ||
                    BatchSize != null &&
                    BatchSize.Equals(other.BatchSize)
                ) && 
                (
                    LearningRateMultiplier == other.LearningRateMultiplier ||
                    LearningRateMultiplier != null &&
                    LearningRateMultiplier.Equals(other.LearningRateMultiplier)
                ) && 
                (
                    NEpochs == other.NEpochs ||
                    NEpochs != null &&
                    NEpochs.Equals(other.NEpochs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BatchSize != null)
                    hashCode = hashCode * 59 + BatchSize.GetHashCode();
                    if (LearningRateMultiplier != null)
                    hashCode = hashCode * 59 + LearningRateMultiplier.GetHashCode();
                    if (NEpochs != null)
                    hashCode = hashCode * 59 + NEpochs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateFineTuningJobRequestHyperparameters left, CreateFineTuningJobRequestHyperparameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateFineTuningJobRequestHyperparameters left, CreateFineTuningJobRequestHyperparameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
