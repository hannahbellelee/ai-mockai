/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BatchesBody : IEquatable<BatchesBody>
    { 
        /// <summary>
        /// The ID of an uploaded file that contains requests for the new batch.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose &#x60;batch&#x60;. The file can contain up to 50,000 requests, and can be up to 100 MB in size. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains requests for the new batch.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose &#x60;batch&#x60;. The file can contain up to 50,000 requests, and can be up to 100 MB in size. </value>
        [Required]

        [DataMember(Name="input_file_id")]
        public string InputFileId { get; set; }

        /// <summary>
        /// The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
        /// </summary>
        /// <value>The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EndpointEnum
        {
            /// <summary>
            /// Enum ChatcompletionsEnum for /v1/chat/completions
            /// </summary>
            [EnumMember(Value = "/v1/chat/completions")]
            ChatcompletionsEnum = 0,
            /// <summary>
            /// Enum EmbeddingsEnum for /v1/embeddings
            /// </summary>
            [EnumMember(Value = "/v1/embeddings")]
            EmbeddingsEnum = 1,
            /// <summary>
            /// Enum CompletionsEnum for /v1/completions
            /// </summary>
            [EnumMember(Value = "/v1/completions")]
            CompletionsEnum = 2        }

        /// <summary>
        /// The endpoint to be used for all requests in the batch. Currently &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported. Note that &#x60;/v1/embeddings&#x60; batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
        /// </summary>
        /// <value>The endpoint to be used for all requests in the batch. Currently &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported. Note that &#x60;/v1/embeddings&#x60; batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.</value>
        [Required]

        [DataMember(Name="endpoint")]
        public EndpointEnum? Endpoint { get; set; }

        /// <summary>
        /// The time frame within which the batch should be processed. Currently only `24h` is supported.
        /// </summary>
        /// <value>The time frame within which the batch should be processed. Currently only `24h` is supported.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CompletionWindowEnum
        {
            /// <summary>
            /// Enum _24hEnum for 24h
            /// </summary>
            [EnumMember(Value = "24h")]
            _24hEnum = 0        }

        /// <summary>
        /// The time frame within which the batch should be processed. Currently only &#x60;24h&#x60; is supported.
        /// </summary>
        /// <value>The time frame within which the batch should be processed. Currently only &#x60;24h&#x60; is supported.</value>
        [Required]

        [DataMember(Name="completion_window")]
        public CompletionWindowEnum? CompletionWindow { get; set; }

        /// <summary>
        /// Optional custom metadata for the batch.
        /// </summary>
        /// <value>Optional custom metadata for the batch.</value>

        [DataMember(Name="metadata")]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchesBody {\n");
            sb.Append("  InputFileId: ").Append(InputFileId).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  CompletionWindow: ").Append(CompletionWindow).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BatchesBody)obj);
        }

        /// <summary>
        /// Returns true if BatchesBody instances are equal
        /// </summary>
        /// <param name="other">Instance of BatchesBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchesBody other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InputFileId == other.InputFileId ||
                    InputFileId != null &&
                    InputFileId.Equals(other.InputFileId)
                ) && 
                (
                    Endpoint == other.Endpoint ||
                    Endpoint != null &&
                    Endpoint.Equals(other.Endpoint)
                ) && 
                (
                    CompletionWindow == other.CompletionWindow ||
                    CompletionWindow != null &&
                    CompletionWindow.Equals(other.CompletionWindow)
                ) && 
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.SequenceEqual(other.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InputFileId != null)
                    hashCode = hashCode * 59 + InputFileId.GetHashCode();
                    if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                    if (CompletionWindow != null)
                    hashCode = hashCode * 59 + CompletionWindow.GetHashCode();
                    if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BatchesBody left, BatchesBody right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BatchesBody left, BatchesBody right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
