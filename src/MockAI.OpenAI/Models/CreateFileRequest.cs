/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateFileRequest : IEquatable<CreateFileRequest>
    { 
        /// <summary>
        /// The File object (not file name) to be uploaded. 
        /// </summary>
        /// <value>The File object (not file name) to be uploaded. </value>
        [Required]

        [DataMember(Name="file")]
        public byte[] File { get; set; }

        /// <summary>
        /// The intended purpose of the uploaded file.  Use \"assistants\" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, \"vision\" for Assistants image file inputs, \"batch\" for [Batch API](/docs/guides/batch), and \"fine-tune\" for [Fine-tuning](/docs/api-reference/fine-tuning). 
        /// </summary>
        /// <value>The intended purpose of the uploaded file.  Use \"assistants\" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, \"vision\" for Assistants image file inputs, \"batch\" for [Batch API](/docs/guides/batch), and \"fine-tune\" for [Fine-tuning](/docs/api-reference/fine-tuning). </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PurposeEnum
        {
            /// <summary>
            /// Enum AssistantsEnum for assistants
            /// </summary>
            [EnumMember(Value = "assistants")]
            AssistantsEnum = 0,
            /// <summary>
            /// Enum BatchEnum for batch
            /// </summary>
            [EnumMember(Value = "batch")]
            BatchEnum = 1,
            /// <summary>
            /// Enum FineTuneEnum for fine-tune
            /// </summary>
            [EnumMember(Value = "fine-tune")]
            FineTuneEnum = 2,
            /// <summary>
            /// Enum VisionEnum for vision
            /// </summary>
            [EnumMember(Value = "vision")]
            VisionEnum = 3        }

        /// <summary>
        /// The intended purpose of the uploaded file.  Use \&quot;assistants\&quot; for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, \&quot;vision\&quot; for Assistants image file inputs, \&quot;batch\&quot; for [Batch API](/docs/guides/batch), and \&quot;fine-tune\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning). 
        /// </summary>
        /// <value>The intended purpose of the uploaded file.  Use \&quot;assistants\&quot; for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, \&quot;vision\&quot; for Assistants image file inputs, \&quot;batch\&quot; for [Batch API](/docs/guides/batch), and \&quot;fine-tune\&quot; for [Fine-tuning](/docs/api-reference/fine-tuning). </value>
        [Required]

        [DataMember(Name="purpose")]
        public PurposeEnum? Purpose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFileRequest {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateFileRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateFileRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateFileRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFileRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.Equals(other.Purpose)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateFileRequest left, CreateFileRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateFileRequest left, CreateFileRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
