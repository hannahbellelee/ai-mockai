/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TranscriptionSegment : IEquatable<TranscriptionSegment>
    { 
        /// <summary>
        /// Unique identifier of the segment.
        /// </summary>
        /// <value>Unique identifier of the segment.</value>
        [Required]

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Seek offset of the segment.
        /// </summary>
        /// <value>Seek offset of the segment.</value>
        [Required]

        [DataMember(Name="seek")]
        public int? Seek { get; set; }

        /// <summary>
        /// Start time of the segment in seconds.
        /// </summary>
        /// <value>Start time of the segment in seconds.</value>
        [Required]

        [DataMember(Name="start")]
        public float? Start { get; set; }

        /// <summary>
        /// End time of the segment in seconds.
        /// </summary>
        /// <value>End time of the segment in seconds.</value>
        [Required]

        [DataMember(Name="end")]
        public float? End { get; set; }

        /// <summary>
        /// Text content of the segment.
        /// </summary>
        /// <value>Text content of the segment.</value>
        [Required]

        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Array of token IDs for the text content.
        /// </summary>
        /// <value>Array of token IDs for the text content.</value>
        [Required]

        [DataMember(Name="tokens")]
        public List<int?> Tokens { get; set; }

        /// <summary>
        /// Temperature parameter used for generating the segment.
        /// </summary>
        /// <value>Temperature parameter used for generating the segment.</value>
        [Required]

        [DataMember(Name="temperature")]
        public float? Temperature { get; set; }

        /// <summary>
        /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
        /// </summary>
        /// <value>Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.</value>
        [Required]

        [DataMember(Name="avg_logprob")]
        public float? AvgLogprob { get; set; }

        /// <summary>
        /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
        /// </summary>
        /// <value>Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.</value>
        [Required]

        [DataMember(Name="compression_ratio")]
        public float? CompressionRatio { get; set; }

        /// <summary>
        /// Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.
        /// </summary>
        /// <value>Probability of no speech in the segment. If the value is higher than 1.0 and the &#x60;avg_logprob&#x60; is below -1, consider this segment silent.</value>
        [Required]

        [DataMember(Name="no_speech_prob")]
        public float? NoSpeechProb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranscriptionSegment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Seek: ").Append(Seek).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  AvgLogprob: ").Append(AvgLogprob).Append("\n");
            sb.Append("  CompressionRatio: ").Append(CompressionRatio).Append("\n");
            sb.Append("  NoSpeechProb: ").Append(NoSpeechProb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TranscriptionSegment)obj);
        }

        /// <summary>
        /// Returns true if TranscriptionSegment instances are equal
        /// </summary>
        /// <param name="other">Instance of TranscriptionSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscriptionSegment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Seek == other.Seek ||
                    Seek != null &&
                    Seek.Equals(other.Seek)
                ) && 
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Tokens == other.Tokens ||
                    Tokens != null &&
                    Tokens.SequenceEqual(other.Tokens)
                ) && 
                (
                    Temperature == other.Temperature ||
                    Temperature != null &&
                    Temperature.Equals(other.Temperature)
                ) && 
                (
                    AvgLogprob == other.AvgLogprob ||
                    AvgLogprob != null &&
                    AvgLogprob.Equals(other.AvgLogprob)
                ) && 
                (
                    CompressionRatio == other.CompressionRatio ||
                    CompressionRatio != null &&
                    CompressionRatio.Equals(other.CompressionRatio)
                ) && 
                (
                    NoSpeechProb == other.NoSpeechProb ||
                    NoSpeechProb != null &&
                    NoSpeechProb.Equals(other.NoSpeechProb)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Seek != null)
                    hashCode = hashCode * 59 + Seek.GetHashCode();
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Tokens != null)
                    hashCode = hashCode * 59 + Tokens.GetHashCode();
                    if (Temperature != null)
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                    if (AvgLogprob != null)
                    hashCode = hashCode * 59 + AvgLogprob.GetHashCode();
                    if (CompressionRatio != null)
                    hashCode = hashCode * 59 + CompressionRatio.GetHashCode();
                    if (NoSpeechProb != null)
                    hashCode = hashCode * 59 + NoSpeechProb.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TranscriptionSegment left, TranscriptionSegment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TranscriptionSegment left, TranscriptionSegment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
