/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VectorStoreObjectFileCounts : IEquatable<VectorStoreObjectFileCounts>
    { 
        /// <summary>
        /// The number of files that are currently being processed.
        /// </summary>
        /// <value>The number of files that are currently being processed.</value>
        [Required]

        [DataMember(Name="in_progress")]
        public int? InProgress { get; set; }

        /// <summary>
        /// The number of files that have been successfully processed.
        /// </summary>
        /// <value>The number of files that have been successfully processed.</value>
        [Required]

        [DataMember(Name="completed")]
        public int? Completed { get; set; }

        /// <summary>
        /// The number of files that have failed to process.
        /// </summary>
        /// <value>The number of files that have failed to process.</value>
        [Required]

        [DataMember(Name="failed")]
        public int? Failed { get; set; }

        /// <summary>
        /// The number of files that were cancelled.
        /// </summary>
        /// <value>The number of files that were cancelled.</value>
        [Required]

        [DataMember(Name="cancelled")]
        public int? Cancelled { get; set; }

        /// <summary>
        /// The total number of files.
        /// </summary>
        /// <value>The total number of files.</value>
        [Required]

        [DataMember(Name="total")]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VectorStoreObjectFileCounts {\n");
            sb.Append("  InProgress: ").Append(InProgress).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VectorStoreObjectFileCounts)obj);
        }

        /// <summary>
        /// Returns true if VectorStoreObjectFileCounts instances are equal
        /// </summary>
        /// <param name="other">Instance of VectorStoreObjectFileCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VectorStoreObjectFileCounts other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InProgress == other.InProgress ||
                    InProgress != null &&
                    InProgress.Equals(other.InProgress)
                ) && 
                (
                    Completed == other.Completed ||
                    Completed != null &&
                    Completed.Equals(other.Completed)
                ) && 
                (
                    Failed == other.Failed ||
                    Failed != null &&
                    Failed.Equals(other.Failed)
                ) && 
                (
                    Cancelled == other.Cancelled ||
                    Cancelled != null &&
                    Cancelled.Equals(other.Cancelled)
                ) && 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InProgress != null)
                    hashCode = hashCode * 59 + InProgress.GetHashCode();
                    if (Completed != null)
                    hashCode = hashCode * 59 + Completed.GetHashCode();
                    if (Failed != null)
                    hashCode = hashCode * 59 + Failed.GetHashCode();
                    if (Cancelled != null)
                    hashCode = hashCode * 59 + Cancelled.GetHashCode();
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VectorStoreObjectFileCounts left, VectorStoreObjectFileCounts right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VectorStoreObjectFileCounts left, VectorStoreObjectFileCounts right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
