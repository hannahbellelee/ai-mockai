/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. 
    /// </summary>
    [DataContract]
    public partial class FineTuningJob : IEquatable<FineTuningJob>
    { 
        /// <summary>
        /// The object identifier, which can be referenced in the API endpoints.
        /// </summary>
        /// <value>The object identifier, which can be referenced in the API endpoints.</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was created.</value>
        [Required]

        [DataMember(Name="created_at")]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [Required]

        [DataMember(Name="error")]
        public FineTuningJobError Error { get; set; }

        /// <summary>
        /// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.</value>
        [Required]

        [DataMember(Name="fine_tuned_model")]
        public string FineTunedModel { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.</value>
        [Required]

        [DataMember(Name="finished_at")]
        public int? FinishedAt { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparameters
        /// </summary>
        [Required]

        [DataMember(Name="hyperparameters")]
        public FineTuningJobHyperparameters Hyperparameters { get; set; }

        /// <summary>
        /// The base model that is being fine-tuned.
        /// </summary>
        /// <value>The base model that is being fine-tuned.</value>
        [Required]

        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// The object type, which is always \"fine_tuning.job\".
        /// </summary>
        /// <value>The object type, which is always \"fine_tuning.job\".</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum FineTuningJobEnum for fine_tuning.job
            /// </summary>
            [EnumMember(Value = "fine_tuning.job")]
            FineTuningJobEnum = 0        }

        /// <summary>
        /// The object type, which is always \&quot;fine_tuning.job\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;fine_tuning.job\&quot;.</value>
        [Required]

        [DataMember(Name="object")]
        public ObjectEnum? _Object { get; set; }

        /// <summary>
        /// The organization that owns the fine-tuning job.
        /// </summary>
        /// <value>The organization that owns the fine-tuning job.</value>
        [Required]

        [DataMember(Name="organization_id")]
        public string OrganizationId { get; set; }

        /// <summary>
        /// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [Required]

        [DataMember(Name="result_files")]
        public List<string> ResultFiles { get; set; }

        /// <summary>
        /// The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
        /// </summary>
        /// <value>The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ValidatingFilesEnum for validating_files
            /// </summary>
            [EnumMember(Value = "validating_files")]
            ValidatingFilesEnum = 0,
            /// <summary>
            /// Enum QueuedEnum for queued
            /// </summary>
            [EnumMember(Value = "queued")]
            QueuedEnum = 1,
            /// <summary>
            /// Enum RunningEnum for running
            /// </summary>
            [EnumMember(Value = "running")]
            RunningEnum = 2,
            /// <summary>
            /// Enum SucceededEnum for succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            SucceededEnum = 3,
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4,
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 5        }

        /// <summary>
        /// The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
        /// </summary>
        /// <value>The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</value>
        [Required]

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.</value>
        [Required]

        [DataMember(Name="trained_tokens")]
        public int? TrainedTokens { get; set; }

        /// <summary>
        /// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [Required]

        [DataMember(Name="training_file")]
        public string TrainingFile { get; set; }

        /// <summary>
        /// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [Required]

        [DataMember(Name="validation_file")]
        public string ValidationFile { get; set; }

        /// <summary>
        /// A list of integrations to enable for this fine-tuning job.
        /// </summary>
        /// <value>A list of integrations to enable for this fine-tuning job.</value>

        [DataMember(Name="integrations")]
        public List<OneOfFineTuningJobIntegrationsItems> Integrations { get; set; }

        /// <summary>
        /// The seed used for the fine-tuning job.
        /// </summary>
        /// <value>The seed used for the fine-tuning job.</value>
        [Required]

        [DataMember(Name="seed")]
        public int? Seed { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.</value>

        [DataMember(Name="estimated_finish")]
        public int? EstimatedFinish { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FineTuningJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  FineTunedModel: ").Append(FineTunedModel).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Hyperparameters: ").Append(Hyperparameters).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ResultFiles: ").Append(ResultFiles).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrainedTokens: ").Append(TrainedTokens).Append("\n");
            sb.Append("  TrainingFile: ").Append(TrainingFile).Append("\n");
            sb.Append("  ValidationFile: ").Append(ValidationFile).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  EstimatedFinish: ").Append(EstimatedFinish).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FineTuningJob)obj);
        }

        /// <summary>
        /// Returns true if FineTuningJob instances are equal
        /// </summary>
        /// <param name="other">Instance of FineTuningJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FineTuningJob other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    FineTunedModel == other.FineTunedModel ||
                    FineTunedModel != null &&
                    FineTunedModel.Equals(other.FineTunedModel)
                ) && 
                (
                    FinishedAt == other.FinishedAt ||
                    FinishedAt != null &&
                    FinishedAt.Equals(other.FinishedAt)
                ) && 
                (
                    Hyperparameters == other.Hyperparameters ||
                    Hyperparameters != null &&
                    Hyperparameters.Equals(other.Hyperparameters)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    _Object == other._Object ||
                    _Object != null &&
                    _Object.Equals(other._Object)
                ) && 
                (
                    OrganizationId == other.OrganizationId ||
                    OrganizationId != null &&
                    OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    ResultFiles == other.ResultFiles ||
                    ResultFiles != null &&
                    ResultFiles.SequenceEqual(other.ResultFiles)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    TrainedTokens == other.TrainedTokens ||
                    TrainedTokens != null &&
                    TrainedTokens.Equals(other.TrainedTokens)
                ) && 
                (
                    TrainingFile == other.TrainingFile ||
                    TrainingFile != null &&
                    TrainingFile.Equals(other.TrainingFile)
                ) && 
                (
                    ValidationFile == other.ValidationFile ||
                    ValidationFile != null &&
                    ValidationFile.Equals(other.ValidationFile)
                ) && 
                (
                    Integrations == other.Integrations ||
                    Integrations != null &&
                    Integrations.SequenceEqual(other.Integrations)
                ) && 
                (
                    Seed == other.Seed ||
                    Seed != null &&
                    Seed.Equals(other.Seed)
                ) && 
                (
                    EstimatedFinish == other.EstimatedFinish ||
                    EstimatedFinish != null &&
                    EstimatedFinish.Equals(other.EstimatedFinish)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (FineTunedModel != null)
                    hashCode = hashCode * 59 + FineTunedModel.GetHashCode();
                    if (FinishedAt != null)
                    hashCode = hashCode * 59 + FinishedAt.GetHashCode();
                    if (Hyperparameters != null)
                    hashCode = hashCode * 59 + Hyperparameters.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (_Object != null)
                    hashCode = hashCode * 59 + _Object.GetHashCode();
                    if (OrganizationId != null)
                    hashCode = hashCode * 59 + OrganizationId.GetHashCode();
                    if (ResultFiles != null)
                    hashCode = hashCode * 59 + ResultFiles.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (TrainedTokens != null)
                    hashCode = hashCode * 59 + TrainedTokens.GetHashCode();
                    if (TrainingFile != null)
                    hashCode = hashCode * 59 + TrainingFile.GetHashCode();
                    if (ValidationFile != null)
                    hashCode = hashCode * 59 + ValidationFile.GetHashCode();
                    if (Integrations != null)
                    hashCode = hashCode * 59 + Integrations.GetHashCode();
                    if (Seed != null)
                    hashCode = hashCode * 59 + Seed.GetHashCode();
                    if (EstimatedFinish != null)
                    hashCode = hashCode * 59 + EstimatedFinish.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FineTuningJob left, FineTuningJob right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FineTuningJob left, FineTuningJob right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
