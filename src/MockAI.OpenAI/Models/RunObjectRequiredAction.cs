/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Details on the action required to continue the run. Will be &#x60;null&#x60; if no action is required.
    /// </summary>
    [DataContract]
    public partial class RunObjectRequiredAction : IEquatable<RunObjectRequiredAction>
    { 
        /// <summary>
        /// For now, this is always `submit_tool_outputs`.
        /// </summary>
        /// <value>For now, this is always `submit_tool_outputs`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SubmitToolOutputsEnum for submit_tool_outputs
            /// </summary>
            [EnumMember(Value = "submit_tool_outputs")]
            SubmitToolOutputsEnum = 0        }

        /// <summary>
        /// For now, this is always &#x60;submit_tool_outputs&#x60;.
        /// </summary>
        /// <value>For now, this is always &#x60;submit_tool_outputs&#x60;.</value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets SubmitToolOutputs
        /// </summary>
        [Required]

        [DataMember(Name="submit_tool_outputs")]
        public RunObjectRequiredActionSubmitToolOutputs SubmitToolOutputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunObjectRequiredAction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubmitToolOutputs: ").Append(SubmitToolOutputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RunObjectRequiredAction)obj);
        }

        /// <summary>
        /// Returns true if RunObjectRequiredAction instances are equal
        /// </summary>
        /// <param name="other">Instance of RunObjectRequiredAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunObjectRequiredAction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    SubmitToolOutputs == other.SubmitToolOutputs ||
                    SubmitToolOutputs != null &&
                    SubmitToolOutputs.Equals(other.SubmitToolOutputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (SubmitToolOutputs != null)
                    hashCode = hashCode * 59 + SubmitToolOutputs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RunObjectRequiredAction left, RunObjectRequiredAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RunObjectRequiredAction left, RunObjectRequiredAction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
