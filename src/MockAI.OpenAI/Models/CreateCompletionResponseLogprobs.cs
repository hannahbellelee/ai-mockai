/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateCompletionResponseLogprobs : IEquatable<CreateCompletionResponseLogprobs>
    { 
        /// <summary>
        /// Gets or Sets TextOffset
        /// </summary>

        [DataMember(Name="text_offset")]
        public List<int?> TextOffset { get; set; }

        /// <summary>
        /// Gets or Sets TokenLogprobs
        /// </summary>

        [DataMember(Name="token_logprobs")]
        public List<decimal?> TokenLogprobs { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>

        [DataMember(Name="tokens")]
        public List<string> Tokens { get; set; }

        /// <summary>
        /// Gets or Sets TopLogprobs
        /// </summary>

        [DataMember(Name="top_logprobs")]
        public List<Dictionary<string, decimal?>> TopLogprobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCompletionResponseLogprobs {\n");
            sb.Append("  TextOffset: ").Append(TextOffset).Append("\n");
            sb.Append("  TokenLogprobs: ").Append(TokenLogprobs).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  TopLogprobs: ").Append(TopLogprobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateCompletionResponseLogprobs)obj);
        }

        /// <summary>
        /// Returns true if CreateCompletionResponseLogprobs instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateCompletionResponseLogprobs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCompletionResponseLogprobs other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TextOffset == other.TextOffset ||
                    TextOffset != null &&
                    TextOffset.SequenceEqual(other.TextOffset)
                ) && 
                (
                    TokenLogprobs == other.TokenLogprobs ||
                    TokenLogprobs != null &&
                    TokenLogprobs.SequenceEqual(other.TokenLogprobs)
                ) && 
                (
                    Tokens == other.Tokens ||
                    Tokens != null &&
                    Tokens.SequenceEqual(other.Tokens)
                ) && 
                (
                    TopLogprobs == other.TopLogprobs ||
                    TopLogprobs != null &&
                    TopLogprobs.SequenceEqual(other.TopLogprobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TextOffset != null)
                    hashCode = hashCode * 59 + TextOffset.GetHashCode();
                    if (TokenLogprobs != null)
                    hashCode = hashCode * 59 + TokenLogprobs.GetHashCode();
                    if (Tokens != null)
                    hashCode = hashCode * 59 + Tokens.GetHashCode();
                    if (TopLogprobs != null)
                    hashCode = hashCode * 59 + TopLogprobs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateCompletionResponseLogprobs left, CreateCompletionResponseLogprobs right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateCompletionResponseLogprobs left, CreateCompletionResponseLogprobs right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
