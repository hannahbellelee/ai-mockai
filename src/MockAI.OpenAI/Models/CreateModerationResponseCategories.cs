/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// A list of the categories, and whether they are flagged or not.
    /// </summary>
    [DataContract]
    public partial class CreateModerationResponseCategories : IEquatable<CreateModerationResponseCategories>
    { 
        /// <summary>
        /// Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
        /// </summary>
        /// <value>Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.</value>
        [Required]

        [DataMember(Name="hate")]
        public bool? Hate { get; set; }

        /// <summary>
        /// Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
        /// </summary>
        /// <value>Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.</value>
        [Required]

        [DataMember(Name="hate/threatening")]
        public bool? Hatethreatening { get; set; }

        /// <summary>
        /// Content that expresses, incites, or promotes harassing language towards any target.
        /// </summary>
        /// <value>Content that expresses, incites, or promotes harassing language towards any target.</value>
        [Required]

        [DataMember(Name="harassment")]
        public bool? Harassment { get; set; }

        /// <summary>
        /// Harassment content that also includes violence or serious harm towards any target.
        /// </summary>
        /// <value>Harassment content that also includes violence or serious harm towards any target.</value>
        [Required]

        [DataMember(Name="harassment/threatening")]
        public bool? Harassmentthreatening { get; set; }

        /// <summary>
        /// Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
        /// </summary>
        /// <value>Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.</value>
        [Required]

        [DataMember(Name="self-harm")]
        public bool? SelfHarm { get; set; }

        /// <summary>
        /// Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
        /// </summary>
        /// <value>Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.</value>
        [Required]

        [DataMember(Name="self-harm/intent")]
        public bool? SelfHarmintent { get; set; }

        /// <summary>
        /// Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
        /// </summary>
        /// <value>Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.</value>
        [Required]

        [DataMember(Name="self-harm/instructions")]
        public bool? SelfHarminstructions { get; set; }

        /// <summary>
        /// Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
        /// </summary>
        /// <value>Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).</value>
        [Required]

        [DataMember(Name="sexual")]
        public bool? Sexual { get; set; }

        /// <summary>
        /// Sexual content that includes an individual who is under 18 years old.
        /// </summary>
        /// <value>Sexual content that includes an individual who is under 18 years old.</value>
        [Required]

        [DataMember(Name="sexual/minors")]
        public bool? Sexualminors { get; set; }

        /// <summary>
        /// Content that depicts death, violence, or physical injury.
        /// </summary>
        /// <value>Content that depicts death, violence, or physical injury.</value>
        [Required]

        [DataMember(Name="violence")]
        public bool? Violence { get; set; }

        /// <summary>
        /// Content that depicts death, violence, or physical injury in graphic detail.
        /// </summary>
        /// <value>Content that depicts death, violence, or physical injury in graphic detail.</value>
        [Required]

        [DataMember(Name="violence/graphic")]
        public bool? Violencegraphic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateModerationResponseCategories {\n");
            sb.Append("  Hate: ").Append(Hate).Append("\n");
            sb.Append("  Hatethreatening: ").Append(Hatethreatening).Append("\n");
            sb.Append("  Harassment: ").Append(Harassment).Append("\n");
            sb.Append("  Harassmentthreatening: ").Append(Harassmentthreatening).Append("\n");
            sb.Append("  SelfHarm: ").Append(SelfHarm).Append("\n");
            sb.Append("  SelfHarmintent: ").Append(SelfHarmintent).Append("\n");
            sb.Append("  SelfHarminstructions: ").Append(SelfHarminstructions).Append("\n");
            sb.Append("  Sexual: ").Append(Sexual).Append("\n");
            sb.Append("  Sexualminors: ").Append(Sexualminors).Append("\n");
            sb.Append("  Violence: ").Append(Violence).Append("\n");
            sb.Append("  Violencegraphic: ").Append(Violencegraphic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateModerationResponseCategories)obj);
        }

        /// <summary>
        /// Returns true if CreateModerationResponseCategories instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateModerationResponseCategories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateModerationResponseCategories other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Hate == other.Hate ||
                    Hate != null &&
                    Hate.Equals(other.Hate)
                ) && 
                (
                    Hatethreatening == other.Hatethreatening ||
                    Hatethreatening != null &&
                    Hatethreatening.Equals(other.Hatethreatening)
                ) && 
                (
                    Harassment == other.Harassment ||
                    Harassment != null &&
                    Harassment.Equals(other.Harassment)
                ) && 
                (
                    Harassmentthreatening == other.Harassmentthreatening ||
                    Harassmentthreatening != null &&
                    Harassmentthreatening.Equals(other.Harassmentthreatening)
                ) && 
                (
                    SelfHarm == other.SelfHarm ||
                    SelfHarm != null &&
                    SelfHarm.Equals(other.SelfHarm)
                ) && 
                (
                    SelfHarmintent == other.SelfHarmintent ||
                    SelfHarmintent != null &&
                    SelfHarmintent.Equals(other.SelfHarmintent)
                ) && 
                (
                    SelfHarminstructions == other.SelfHarminstructions ||
                    SelfHarminstructions != null &&
                    SelfHarminstructions.Equals(other.SelfHarminstructions)
                ) && 
                (
                    Sexual == other.Sexual ||
                    Sexual != null &&
                    Sexual.Equals(other.Sexual)
                ) && 
                (
                    Sexualminors == other.Sexualminors ||
                    Sexualminors != null &&
                    Sexualminors.Equals(other.Sexualminors)
                ) && 
                (
                    Violence == other.Violence ||
                    Violence != null &&
                    Violence.Equals(other.Violence)
                ) && 
                (
                    Violencegraphic == other.Violencegraphic ||
                    Violencegraphic != null &&
                    Violencegraphic.Equals(other.Violencegraphic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Hate != null)
                    hashCode = hashCode * 59 + Hate.GetHashCode();
                    if (Hatethreatening != null)
                    hashCode = hashCode * 59 + Hatethreatening.GetHashCode();
                    if (Harassment != null)
                    hashCode = hashCode * 59 + Harassment.GetHashCode();
                    if (Harassmentthreatening != null)
                    hashCode = hashCode * 59 + Harassmentthreatening.GetHashCode();
                    if (SelfHarm != null)
                    hashCode = hashCode * 59 + SelfHarm.GetHashCode();
                    if (SelfHarmintent != null)
                    hashCode = hashCode * 59 + SelfHarmintent.GetHashCode();
                    if (SelfHarminstructions != null)
                    hashCode = hashCode * 59 + SelfHarminstructions.GetHashCode();
                    if (Sexual != null)
                    hashCode = hashCode * 59 + Sexual.GetHashCode();
                    if (Sexualminors != null)
                    hashCode = hashCode * 59 + Sexualminors.GetHashCode();
                    if (Violence != null)
                    hashCode = hashCode * 59 + Violence.GetHashCode();
                    if (Violencegraphic != null)
                    hashCode = hashCode * 59 + Violencegraphic.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateModerationResponseCategories left, CreateModerationResponseCategories right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateModerationResponseCategories left, CreateModerationResponseCategories right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
