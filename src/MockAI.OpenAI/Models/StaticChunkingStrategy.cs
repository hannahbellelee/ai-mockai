/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StaticChunkingStrategy : IEquatable<StaticChunkingStrategy>
    { 
        /// <summary>
        /// The maximum number of tokens in each chunk. The default value is &#x60;800&#x60;. The minimum value is &#x60;100&#x60; and the maximum value is &#x60;4096&#x60;.
        /// </summary>
        /// <value>The maximum number of tokens in each chunk. The default value is &#x60;800&#x60;. The minimum value is &#x60;100&#x60; and the maximum value is &#x60;4096&#x60;.</value>
        [Required]

        [Range(100, 4096)]
        [DataMember(Name="max_chunk_size_tokens")]
        public int? MaxChunkSizeTokens { get; set; }

        /// <summary>
        /// The number of tokens that overlap between chunks. The default value is &#x60;400&#x60;.  Note that the overlap must not exceed half of &#x60;max_chunk_size_tokens&#x60;. 
        /// </summary>
        /// <value>The number of tokens that overlap between chunks. The default value is &#x60;400&#x60;.  Note that the overlap must not exceed half of &#x60;max_chunk_size_tokens&#x60;. </value>
        [Required]

        [DataMember(Name="chunk_overlap_tokens")]
        public int? ChunkOverlapTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaticChunkingStrategy {\n");
            sb.Append("  MaxChunkSizeTokens: ").Append(MaxChunkSizeTokens).Append("\n");
            sb.Append("  ChunkOverlapTokens: ").Append(ChunkOverlapTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StaticChunkingStrategy)obj);
        }

        /// <summary>
        /// Returns true if StaticChunkingStrategy instances are equal
        /// </summary>
        /// <param name="other">Instance of StaticChunkingStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaticChunkingStrategy other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MaxChunkSizeTokens == other.MaxChunkSizeTokens ||
                    MaxChunkSizeTokens != null &&
                    MaxChunkSizeTokens.Equals(other.MaxChunkSizeTokens)
                ) && 
                (
                    ChunkOverlapTokens == other.ChunkOverlapTokens ||
                    ChunkOverlapTokens != null &&
                    ChunkOverlapTokens.Equals(other.ChunkOverlapTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MaxChunkSizeTokens != null)
                    hashCode = hashCode * 59 + MaxChunkSizeTokens.GetHashCode();
                    if (ChunkOverlapTokens != null)
                    hashCode = hashCode * 59 + ChunkOverlapTokens.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StaticChunkingStrategy left, StaticChunkingStrategy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StaticChunkingStrategy left, StaticChunkingStrategy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
