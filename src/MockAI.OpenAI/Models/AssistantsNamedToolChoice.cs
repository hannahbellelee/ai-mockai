/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Specifies a tool the model should use. Use to force the model to call a specific tool.
    /// </summary>
    [DataContract]
    public partial class AssistantsNamedToolChoice : IEquatable<AssistantsNamedToolChoice>, AssistantsApiToolChoiceOption 
    { 
        /// <summary>
        /// The type of the tool. If type is `function`, the function name must be set
        /// </summary>
        /// <value>The type of the tool. If type is `function`, the function name must be set</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FunctionEnum for function
            /// </summary>
            [EnumMember(Value = "function")]
            FunctionEnum = 0,
            /// <summary>
            /// Enum CodeInterpreterEnum for code_interpreter
            /// </summary>
            [EnumMember(Value = "code_interpreter")]
            CodeInterpreterEnum = 1,
            /// <summary>
            /// Enum FileSearchEnum for file_search
            /// </summary>
            [EnumMember(Value = "file_search")]
            FileSearchEnum = 2        }

        /// <summary>
        /// The type of the tool. If type is &#x60;function&#x60;, the function name must be set
        /// </summary>
        /// <value>The type of the tool. If type is &#x60;function&#x60;, the function name must be set</value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Function
        /// </summary>

        [DataMember(Name="function")]
        public ChatCompletionNamedToolChoiceFunction Function { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssistantsNamedToolChoice {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Function: ").Append(Function).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssistantsNamedToolChoice)obj);
        }

        /// <summary>
        /// Returns true if AssistantsNamedToolChoice instances are equal
        /// </summary>
        /// <param name="other">Instance of AssistantsNamedToolChoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssistantsNamedToolChoice other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Function == other.Function ||
                    Function != null &&
                    Function.Equals(other.Function)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Function != null)
                    hashCode = hashCode * 59 + Function.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssistantsNamedToolChoice left, AssistantsNamedToolChoice right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssistantsNamedToolChoice left, AssistantsNamedToolChoice right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
