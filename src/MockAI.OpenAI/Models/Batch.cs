/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Batch : IEquatable<Batch>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The object type, which is always `batch`.
        /// </summary>
        /// <value>The object type, which is always `batch`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum BatchEnum for batch
            /// </summary>
            [EnumMember(Value = "batch")]
            BatchEnum = 0        }

        /// <summary>
        /// The object type, which is always &#x60;batch&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;batch&#x60;.</value>
        [Required]

        [DataMember(Name="object")]
        public ObjectEnum? _Object { get; set; }

        /// <summary>
        /// The OpenAI API endpoint used by the batch.
        /// </summary>
        /// <value>The OpenAI API endpoint used by the batch.</value>
        [Required]

        [DataMember(Name="endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>

        [DataMember(Name="errors")]
        public BatchErrors Errors { get; set; }

        /// <summary>
        /// The ID of the input file for the batch.
        /// </summary>
        /// <value>The ID of the input file for the batch.</value>
        [Required]

        [DataMember(Name="input_file_id")]
        public string InputFileId { get; set; }

        /// <summary>
        /// The time frame within which the batch should be processed.
        /// </summary>
        /// <value>The time frame within which the batch should be processed.</value>
        [Required]

        [DataMember(Name="completion_window")]
        public string CompletionWindow { get; set; }

        /// <summary>
        /// The current status of the batch.
        /// </summary>
        /// <value>The current status of the batch.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ValidatingEnum for validating
            /// </summary>
            [EnumMember(Value = "validating")]
            ValidatingEnum = 0,
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 1,
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 2,
            /// <summary>
            /// Enum FinalizingEnum for finalizing
            /// </summary>
            [EnumMember(Value = "finalizing")]
            FinalizingEnum = 3,
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 4,
            /// <summary>
            /// Enum ExpiredEnum for expired
            /// </summary>
            [EnumMember(Value = "expired")]
            ExpiredEnum = 5,
            /// <summary>
            /// Enum CancellingEnum for cancelling
            /// </summary>
            [EnumMember(Value = "cancelling")]
            CancellingEnum = 6,
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 7        }

        /// <summary>
        /// The current status of the batch.
        /// </summary>
        /// <value>The current status of the batch.</value>
        [Required]

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// The ID of the file containing the outputs of successfully executed requests.
        /// </summary>
        /// <value>The ID of the file containing the outputs of successfully executed requests.</value>

        [DataMember(Name="output_file_id")]
        public string OutputFileId { get; set; }

        /// <summary>
        /// The ID of the file containing the outputs of requests with errors.
        /// </summary>
        /// <value>The ID of the file containing the outputs of requests with errors.</value>

        [DataMember(Name="error_file_id")]
        public string ErrorFileId { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch was created.</value>
        [Required]

        [DataMember(Name="created_at")]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch started processing.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch started processing.</value>

        [DataMember(Name="in_progress_at")]
        public int? InProgressAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch will expire.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch will expire.</value>

        [DataMember(Name="expires_at")]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch started finalizing.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch started finalizing.</value>

        [DataMember(Name="finalizing_at")]
        public int? FinalizingAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch was completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch was completed.</value>

        [DataMember(Name="completed_at")]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch failed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch failed.</value>

        [DataMember(Name="failed_at")]
        public int? FailedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch expired.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch expired.</value>

        [DataMember(Name="expired_at")]
        public int? ExpiredAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch started cancelling.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch started cancelling.</value>

        [DataMember(Name="cancelling_at")]
        public int? CancellingAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the batch was cancelled.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the batch was cancelled.</value>

        [DataMember(Name="cancelled_at")]
        public int? CancelledAt { get; set; }

        /// <summary>
        /// Gets or Sets RequestCounts
        /// </summary>

        [DataMember(Name="request_counts")]
        public BatchRequestCounts RequestCounts { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>

        [DataMember(Name="metadata")]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Batch {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  InputFileId: ").Append(InputFileId).Append("\n");
            sb.Append("  CompletionWindow: ").Append(CompletionWindow).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OutputFileId: ").Append(OutputFileId).Append("\n");
            sb.Append("  ErrorFileId: ").Append(ErrorFileId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  InProgressAt: ").Append(InProgressAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  FinalizingAt: ").Append(FinalizingAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  FailedAt: ").Append(FailedAt).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  CancellingAt: ").Append(CancellingAt).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  RequestCounts: ").Append(RequestCounts).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Batch)obj);
        }

        /// <summary>
        /// Returns true if Batch instances are equal
        /// </summary>
        /// <param name="other">Instance of Batch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Batch other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    _Object == other._Object ||
                    _Object != null &&
                    _Object.Equals(other._Object)
                ) && 
                (
                    Endpoint == other.Endpoint ||
                    Endpoint != null &&
                    Endpoint.Equals(other.Endpoint)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.Equals(other.Errors)
                ) && 
                (
                    InputFileId == other.InputFileId ||
                    InputFileId != null &&
                    InputFileId.Equals(other.InputFileId)
                ) && 
                (
                    CompletionWindow == other.CompletionWindow ||
                    CompletionWindow != null &&
                    CompletionWindow.Equals(other.CompletionWindow)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    OutputFileId == other.OutputFileId ||
                    OutputFileId != null &&
                    OutputFileId.Equals(other.OutputFileId)
                ) && 
                (
                    ErrorFileId == other.ErrorFileId ||
                    ErrorFileId != null &&
                    ErrorFileId.Equals(other.ErrorFileId)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    InProgressAt == other.InProgressAt ||
                    InProgressAt != null &&
                    InProgressAt.Equals(other.InProgressAt)
                ) && 
                (
                    ExpiresAt == other.ExpiresAt ||
                    ExpiresAt != null &&
                    ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    FinalizingAt == other.FinalizingAt ||
                    FinalizingAt != null &&
                    FinalizingAt.Equals(other.FinalizingAt)
                ) && 
                (
                    CompletedAt == other.CompletedAt ||
                    CompletedAt != null &&
                    CompletedAt.Equals(other.CompletedAt)
                ) && 
                (
                    FailedAt == other.FailedAt ||
                    FailedAt != null &&
                    FailedAt.Equals(other.FailedAt)
                ) && 
                (
                    ExpiredAt == other.ExpiredAt ||
                    ExpiredAt != null &&
                    ExpiredAt.Equals(other.ExpiredAt)
                ) && 
                (
                    CancellingAt == other.CancellingAt ||
                    CancellingAt != null &&
                    CancellingAt.Equals(other.CancellingAt)
                ) && 
                (
                    CancelledAt == other.CancelledAt ||
                    CancelledAt != null &&
                    CancelledAt.Equals(other.CancelledAt)
                ) && 
                (
                    RequestCounts == other.RequestCounts ||
                    RequestCounts != null &&
                    RequestCounts.Equals(other.RequestCounts)
                ) && 
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(other.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (_Object != null)
                    hashCode = hashCode * 59 + _Object.GetHashCode();
                    if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (InputFileId != null)
                    hashCode = hashCode * 59 + InputFileId.GetHashCode();
                    if (CompletionWindow != null)
                    hashCode = hashCode * 59 + CompletionWindow.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (OutputFileId != null)
                    hashCode = hashCode * 59 + OutputFileId.GetHashCode();
                    if (ErrorFileId != null)
                    hashCode = hashCode * 59 + ErrorFileId.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (InProgressAt != null)
                    hashCode = hashCode * 59 + InProgressAt.GetHashCode();
                    if (ExpiresAt != null)
                    hashCode = hashCode * 59 + ExpiresAt.GetHashCode();
                    if (FinalizingAt != null)
                    hashCode = hashCode * 59 + FinalizingAt.GetHashCode();
                    if (CompletedAt != null)
                    hashCode = hashCode * 59 + CompletedAt.GetHashCode();
                    if (FailedAt != null)
                    hashCode = hashCode * 59 + FailedAt.GetHashCode();
                    if (ExpiredAt != null)
                    hashCode = hashCode * 59 + ExpiredAt.GetHashCode();
                    if (CancellingAt != null)
                    hashCode = hashCode * 59 + CancellingAt.GetHashCode();
                    if (CancelledAt != null)
                    hashCode = hashCode * 59 + CancelledAt.GetHashCode();
                    if (RequestCounts != null)
                    hashCode = hashCode * 59 + RequestCounts.GetHashCode();
                    if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Batch left, Batch right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Batch left, Batch right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
