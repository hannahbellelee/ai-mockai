/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// The per-line object of the batch input file
    /// </summary>
    [DataContract]
    public partial class BatchRequestInput : IEquatable<BatchRequestInput>
    { 
        /// <summary>
        /// A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.
        /// </summary>
        /// <value>A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.</value>

        [DataMember(Name="custom_id")]
        public string CustomId { get; set; }

        /// <summary>
        /// The HTTP method to be used for the request. Currently only `POST` is supported.
        /// </summary>
        /// <value>The HTTP method to be used for the request. Currently only `POST` is supported.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum POSTEnum for POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POSTEnum = 0        }

        /// <summary>
        /// The HTTP method to be used for the request. Currently only &#x60;POST&#x60; is supported.
        /// </summary>
        /// <value>The HTTP method to be used for the request. Currently only &#x60;POST&#x60; is supported.</value>

        [DataMember(Name="method")]
        public MethodEnum? Method { get; set; }

        /// <summary>
        /// The OpenAI API relative URL to be used for the request. Currently &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported.
        /// </summary>
        /// <value>The OpenAI API relative URL to be used for the request. Currently &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported.</value>

        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchRequestInput {\n");
            sb.Append("  CustomId: ").Append(CustomId).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BatchRequestInput)obj);
        }

        /// <summary>
        /// Returns true if BatchRequestInput instances are equal
        /// </summary>
        /// <param name="other">Instance of BatchRequestInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchRequestInput other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomId == other.CustomId ||
                    CustomId != null &&
                    CustomId.Equals(other.CustomId)
                ) && 
                (
                    Method == other.Method ||
                    Method != null &&
                    Method.Equals(other.Method)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomId != null)
                    hashCode = hashCode * 59 + CustomId.GetHashCode();
                    if (Method != null)
                    hashCode = hashCode * 59 + Method.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BatchRequestInput left, BatchRequestInput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BatchRequestInput left, BatchRequestInput right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
