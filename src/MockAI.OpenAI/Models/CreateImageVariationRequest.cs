/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateImageVariationRequest : IEquatable<CreateImageVariationRequest>
    { 
        /// <summary>
        /// The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
        /// </summary>
        /// <value>The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.</value>
        [Required]

        [DataMember(Name="image")]
        public byte[] Image { get; set; }

        /// <summary>
        /// The model to use for image generation. Only &#x60;dall-e-2&#x60; is supported at this time.
        /// </summary>
        /// <value>The model to use for image generation. Only &#x60;dall-e-2&#x60; is supported at this time.</value>

        [DataMember(Name="model")]
        public AnyOfCreateImageVariationRequestModel Model { get; set; }

        /// <summary>
        /// The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.
        /// </summary>
        /// <value>The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported.</value>

        [Range(1, 10)]
        [DataMember(Name="n")]
        public int? N { get; set; }

        /// <summary>
        /// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
        /// </summary>
        /// <value>The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResponseFormatEnum
        {
            /// <summary>
            /// Enum UrlEnum for url
            /// </summary>
            [EnumMember(Value = "url")]
            UrlEnum = 0,
            /// <summary>
            /// Enum B64JsonEnum for b64_json
            /// </summary>
            [EnumMember(Value = "b64_json")]
            B64JsonEnum = 1        }

        /// <summary>
        /// The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.
        /// </summary>
        /// <value>The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated.</value>

        [DataMember(Name="response_format")]
        public ResponseFormatEnum? ResponseFormat { get; set; }

        /// <summary>
        /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
        /// </summary>
        /// <value>The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _256x256Enum for 256x256
            /// </summary>
            [EnumMember(Value = "256x256")]
            _256x256Enum = 0,
            /// <summary>
            /// Enum _512x512Enum for 512x512
            /// </summary>
            [EnumMember(Value = "512x512")]
            _512x512Enum = 1,
            /// <summary>
            /// Enum _1024x1024Enum for 1024x1024
            /// </summary>
            [EnumMember(Value = "1024x1024")]
            _1024x1024Enum = 2        }

        /// <summary>
        /// The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
        /// </summary>
        /// <value>The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.</value>

        [DataMember(Name="size")]
        public SizeEnum? Size { get; set; }

        /// <summary>
        /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
        /// </summary>
        /// <value>A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). </value>

        [DataMember(Name="user")]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateImageVariationRequest {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  ResponseFormat: ").Append(ResponseFormat).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateImageVariationRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateImageVariationRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateImageVariationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateImageVariationRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    N == other.N ||
                    N != null &&
                    N.Equals(other.N)
                ) && 
                (
                    ResponseFormat == other.ResponseFormat ||
                    ResponseFormat != null &&
                    ResponseFormat.Equals(other.ResponseFormat)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (N != null)
                    hashCode = hashCode * 59 + N.GetHashCode();
                    if (ResponseFormat != null)
                    hashCode = hashCode * 59 + ResponseFormat.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateImageVariationRequest left, CreateImageVariationRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateImageVariationRequest left, CreateImageVariationRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
