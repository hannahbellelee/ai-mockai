/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateTranscriptionRequest : IEquatable<CreateTranscriptionRequest>
    { 
        /// <summary>
        /// The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. 
        /// </summary>
        /// <value>The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. </value>
        [Required]

        [DataMember(Name="file")]
        public byte[] File { get; set; }

        /// <summary>
        /// ID of the model to use. Only &#x60;whisper-1&#x60; (which is powered by our open source Whisper V2 model) is currently available. 
        /// </summary>
        /// <value>ID of the model to use. Only &#x60;whisper-1&#x60; (which is powered by our open source Whisper V2 model) is currently available. </value>
        [Required]

        [DataMember(Name="model")]
        public AnyOfCreateTranscriptionRequestModel Model { get; set; }

        /// <summary>
        /// The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
        /// </summary>
        /// <value>The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. </value>

        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// An optional text to guide the model&#x27;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
        /// </summary>
        /// <value>An optional text to guide the model&#x27;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. </value>

        [DataMember(Name="prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. 
        /// </summary>
        /// <value>The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResponseFormatEnum
        {
            /// <summary>
            /// Enum JsonEnum for json
            /// </summary>
            [EnumMember(Value = "json")]
            JsonEnum = 0,
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            /// <summary>
            /// Enum SrtEnum for srt
            /// </summary>
            [EnumMember(Value = "srt")]
            SrtEnum = 2,
            /// <summary>
            /// Enum VerboseJsonEnum for verbose_json
            /// </summary>
            [EnumMember(Value = "verbose_json")]
            VerboseJsonEnum = 3,
            /// <summary>
            /// Enum VttEnum for vtt
            /// </summary>
            [EnumMember(Value = "vtt")]
            VttEnum = 4        }

        /// <summary>
        /// The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. 
        /// </summary>
        /// <value>The format of the transcript output, in one of these options: &#x60;json&#x60;, &#x60;text&#x60;, &#x60;srt&#x60;, &#x60;verbose_json&#x60;, or &#x60;vtt&#x60;. </value>

        [DataMember(Name="response_format")]
        public ResponseFormatEnum? ResponseFormat { get; set; }

        /// <summary>
        /// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
        /// </summary>
        /// <value>The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. </value>

        [DataMember(Name="temperature")]
        public decimal? Temperature { get; set; }

        /// <summary>
        /// Gets or Sets TimestampGranularities
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TimestampGranularitiesEnum
        {
            /// <summary>
            /// Enum WordEnum for word
            /// </summary>
            [EnumMember(Value = "word")]
            WordEnum = 0,
            /// <summary>
            /// Enum SegmentEnum for segment
            /// </summary>
            [EnumMember(Value = "segment")]
            SegmentEnum = 1        }

        /// <summary>
        /// The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. 
        /// </summary>
        /// <value>The timestamp granularities to populate for this transcription. &#x60;response_format&#x60; must be set &#x60;verbose_json&#x60; to use timestamp granularities. Either or both of these options are supported: &#x60;word&#x60;, or &#x60;segment&#x60;. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency. </value>

        [DataMember(Name="timestamp_granularities[]")]
        public List<TimestampGranularitiesEnum> TimestampGranularities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTranscriptionRequest {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  ResponseFormat: ").Append(ResponseFormat).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TimestampGranularities: ").Append(TimestampGranularities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateTranscriptionRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateTranscriptionRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateTranscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTranscriptionRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Prompt == other.Prompt ||
                    Prompt != null &&
                    Prompt.Equals(other.Prompt)
                ) && 
                (
                    ResponseFormat == other.ResponseFormat ||
                    ResponseFormat != null &&
                    ResponseFormat.Equals(other.ResponseFormat)
                ) && 
                (
                    Temperature == other.Temperature ||
                    Temperature != null &&
                    Temperature.Equals(other.Temperature)
                ) && 
                (
                    TimestampGranularities == other.TimestampGranularities ||
                    TimestampGranularities != null &&
                    TimestampGranularities.SequenceEqual(other.TimestampGranularities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Prompt != null)
                    hashCode = hashCode * 59 + Prompt.GetHashCode();
                    if (ResponseFormat != null)
                    hashCode = hashCode * 59 + ResponseFormat.GetHashCode();
                    if (Temperature != null)
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                    if (TimestampGranularities != null)
                    hashCode = hashCode * 59 + TimestampGranularities.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateTranscriptionRequest left, CreateTranscriptionRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateTranscriptionRequest left, CreateTranscriptionRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
