/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ChatCompletionTokenLogprob : IEquatable<ChatCompletionTokenLogprob>
    { 
        /// <summary>
        /// The token.
        /// </summary>
        /// <value>The token.</value>
        [Required]

        [DataMember(Name="token")]
        public string Token { get; set; }

        /// <summary>
        /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value &#x60;-9999.0&#x60; is used to signify that the token is very unlikely.
        /// </summary>
        /// <value>The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value &#x60;-9999.0&#x60; is used to signify that the token is very unlikely.</value>
        [Required]

        [DataMember(Name="logprob")]
        public decimal? Logprob { get; set; }

        /// <summary>
        /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be &#x60;null&#x60; if there is no bytes representation for the token.
        /// </summary>
        /// <value>A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be &#x60;null&#x60; if there is no bytes representation for the token.</value>
        [Required]

        [DataMember(Name="bytes")]
        public List<int?> Bytes { get; set; }

        /// <summary>
        /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested &#x60;top_logprobs&#x60; returned.
        /// </summary>
        /// <value>List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested &#x60;top_logprobs&#x60; returned.</value>
        [Required]

        [DataMember(Name="top_logprobs")]
        public List<ChatCompletionTokenLogprobTopLogprobs> TopLogprobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChatCompletionTokenLogprob {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Logprob: ").Append(Logprob).Append("\n");
            sb.Append("  Bytes: ").Append(Bytes).Append("\n");
            sb.Append("  TopLogprobs: ").Append(TopLogprobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChatCompletionTokenLogprob)obj);
        }

        /// <summary>
        /// Returns true if ChatCompletionTokenLogprob instances are equal
        /// </summary>
        /// <param name="other">Instance of ChatCompletionTokenLogprob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatCompletionTokenLogprob other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) && 
                (
                    Logprob == other.Logprob ||
                    Logprob != null &&
                    Logprob.Equals(other.Logprob)
                ) && 
                (
                    Bytes == other.Bytes ||
                    Bytes != null &&
                    Bytes.SequenceEqual(other.Bytes)
                ) && 
                (
                    TopLogprobs == other.TopLogprobs ||
                    TopLogprobs != null &&
                    TopLogprobs.SequenceEqual(other.TopLogprobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                    if (Logprob != null)
                    hashCode = hashCode * 59 + Logprob.GetHashCode();
                    if (Bytes != null)
                    hashCode = hashCode * 59 + Bytes.GetHashCode();
                    if (TopLogprobs != null)
                    hashCode = hashCode * 59 + TopLogprobs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChatCompletionTokenLogprob left, ChatCompletionTokenLogprob right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChatCompletionTokenLogprob left, ChatCompletionTokenLogprob right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
