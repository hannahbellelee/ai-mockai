/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Details of the tool call.
    /// </summary>
    [DataContract]
    public partial class RunStepDetailsToolCallsObject : IEquatable<RunStepDetailsToolCallsObject>, OneOfRunStepObjectStepDetails 
    { 
        /// <summary>
        /// Always `tool_calls`.
        /// </summary>
        /// <value>Always `tool_calls`.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ToolCallsEnum for tool_calls
            /// </summary>
            [EnumMember(Value = "tool_calls")]
            ToolCallsEnum = 0        }

        /// <summary>
        /// Always &#x60;tool_calls&#x60;.
        /// </summary>
        /// <value>Always &#x60;tool_calls&#x60;.</value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;file_search&#x60;, or &#x60;function&#x60;. 
        /// </summary>
        /// <value>An array of tool calls the run step was involved in. These can be associated with one of three types of tools: &#x60;code_interpreter&#x60;, &#x60;file_search&#x60;, or &#x60;function&#x60;. </value>
        [Required]

        [DataMember(Name="tool_calls")]
        public List<OneOfRunStepDetailsToolCallsObjectToolCallsItems> ToolCalls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunStepDetailsToolCallsObject {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ToolCalls: ").Append(ToolCalls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RunStepDetailsToolCallsObject)obj);
        }

        /// <summary>
        /// Returns true if RunStepDetailsToolCallsObject instances are equal
        /// </summary>
        /// <param name="other">Instance of RunStepDetailsToolCallsObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunStepDetailsToolCallsObject other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    ToolCalls == other.ToolCalls ||
                    ToolCalls != null &&
                    ToolCalls.SequenceEqual(other.ToolCalls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ToolCalls != null)
                    hashCode = hashCode * 59 + ToolCalls.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RunStepDetailsToolCallsObject left, RunStepDetailsToolCallsObject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RunStepDetailsToolCallsObject left, RunStepDetailsToolCallsObject right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
